.program spielerei
.side_set 1
.define public CYCLESPERSEC 2000 ; how many cycles per second do I want for the PIO? (divider is 16 bits so max 65536, in steps of 1/256 (8 bits)).

.wrap_target
pull side 1 [5] ; todo replace by autopull, delay after side set else my Logic Analyser is too slow to capture it...
out pins, 8 side 0 [5] ; 
set pins 1 side 1 [5];
set pins 0 side 1 [5];
.wrap

; todo: add a clock pin via side set, or figure out what the e-in needs (hclk, vclk, data and modify to suit)
; todo: it might be easy-er to develop the C part in a C-file and only copy it into the .pio file once it is complete, so there is syntaxHL and documentation

% c-sdk {
    #include "hardware/clocks.h"
static inline void spielerei_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = spielerei_program_get_default_config(offset);


    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin, 8);
    // Set this pin's GPIO function (connect PIO to the pad)
        for(uint i=0;i<8;i++){
            pio_gpio_init(pio, pin+i);
        }
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 8, true);

    sm_config_set_sideset_pins (&c,2); //side-set gpio gp2 -- NOTE: sm_config_set_sideset_pins is not pio_sm_set_sideset_pins! 
    pio_gpio_init(pio,2); // connect pin 2 to pio TODO: pin 2 now hardwired
    pio_sm_set_consecutive_pindirs(pio, sm, 2, 1, true);//set output for the side-set pin

//set pins for use with SET
    sm_config_set_set_pins(&c,3,1); // set pin 3 for use with set
    pio_gpio_init(pio,3);
    pio_sm_set_consecutive_pindirs(pio,sm,3,1,true);

    float div = clock_get_hz(clk_sys) / spielerei_CYCLESPERSEC;
    sm_config_set_clkdiv(&c,div);

    //join both 4-level fifo's into one output fifo (8 levels)
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);


    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}