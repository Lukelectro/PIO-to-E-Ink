.program ED060SC4

; /*
; Dit gaat nog even wat voetjes in de aarde hebben, een PIO-driver voor een ED060SC4 e-paper display.
; 8 data lines, clock cl, Latch Enable LE, Output Enable OE, StartPulseHorizontal SPH, StartPulseVertical SPV, ClocKVertical CKV, GMODE.
; CL can be sideset, but then over 5 other lines remain and the SET pingroup is at most 5 pins. So CKV is also sideset.

; OUT pingroup -> 8 data lines
; SIDESET -> CL, CKV
; SET -> GMODE, SPV, SPH, OE, LE

; pulses should take 1 us or multiples thereof, 4,5,20,100,200 us. So clock at 1 us but wait states needed that probably need loops

; also, 800 pixels need to be written, 4 pixels per byte, so 200 clock pulses on CL - this needs a loop with BOTH scratch registers (200>32)
; also, it might be nice to be able to only write part of the display - so maybe first data should be how many rows to skip? (later!)

; so, it will be a rather number of instructions. Hopefully less then 32 though...

; Display data is writen by pio routine (what used to be writescreen or writerow etc.), other routines in 'regular' software
; */

;// TODO: this is very much UNTESTED and MIGHT NOT WR0K because it WILL CONTAIN ER OMISSIONS and RORS.
;// IDEA: what if all pin settings where part of the data and this just had to play the data to the pins? 
; //      That then might be called a waveform file :P that is OR-ed with the actual display data... hey, that might be how $BigCorp do this.

.sideset 2;

set pins 0b11100 side 0b00; // initial values: GMODE H, SPV H, SPH H, OE L, LE L side CL L, CKV L

.wrap_target

set x 1 side 0
.startscan
set pins 0b11100 side 0b10 ; // start scan: SPV H, clk, SPV L, clk, SPV H, clk
set y 10 side 0
set pins 0b10000 side 0b10; // also activate low SPH, to start scanning in row data (see if that shortcut can be taken, saves on instruction memory)
jmp x-- startscan side 0;

set x 20 side 0;
; //set x 20 and set y 10 or only set y 11: First loop x=0 so it does not jump. 1+10x20=201, so last row is a dummy (or screen is 600x804)
.loop
; // would be nice if it'd wait for data here? Or where else? Does Ã“UT' block when using autpull? If so use autopull. Also: how to pull once then use all 32 bits in groups of 8?
out pins side 0b10; // ckv
jmp x-- loop side 0;
set x 20 side 0;
jmp y-- loop side 0;

set pins 0b11111 side 0b00 [8]; // de-assert active low SPH again (and SPV, etc) and assert LE and OE
.waitabit
nop side 0 [8]
jmp x-- waitabit
set pins 0b11100 side 0b00; // de-assert OE and LE
.wrap

% c-sdk {
    #include "hardware/clocks.h"
static inline void ED060SC4_program_init(PIO pio, uint sm, uint offset, uint outpin_base, uint sidesetpin_base , uint setpin_base) {
    // outpins: data; sidesetpins: cl,ckv; setpins: gmode, spv, sph, oe, le
    pio_sm_config c = spielerei_program_get_default_config(offset);

//set pins for use with SET
    sm_config_set_set_pins(&c,basepin,2); // set pin 3 for use with set
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, basepin);
    pio_gpio_init(pio, (basepin+1)%32);
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio,sm,basepin,2,true);

    float div = clock_get_hz(clk_sys) / 1000000; // 1 cycle should be 1 us, so run at 1 MHz
    sm_config_set_clkdiv(&c,div);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

//todo: include functions to send data to the display (helpers to set up DMA or for testing poke, function to start powersuply and sequence power up, function to power down, etc.)

}


%}